Linux BASH Scripting Notes:

https://linuxconfig.org/bash-scripting-tutorial
https://www.gnu.org/software/bash/manual/html_node/Builtin-Index.html#Builtin-Index

General Notes:
--------------
    Case insensitive
    Help:
        man [item/file/function name]
    Some whitespace sensitivity
    Tries to interpret everything as a command
    Concatenates stuff by default; watch out!
    Single and double quotes are NOT equivalent.  See 'quoting'

Symbols and Characters:
-----------------------
    #           A single-line comment
    #!          A shebang script
    $           Get the value of a variable
    ${}         Get the value of an expression within the braces (e.g. ${array[2]}
    $()         Evaluate the expression within the parentheses
    =           Variable assignment
    $N          The Nth argument passed to a script
    $@          All arguments passed to a script
    $#          The number of arguments passed to a script
    |           Piping
    :-          Test for unset/null before substitution.  See parameter expansion.
    :=          Test for unset/null before assignment.  See parameter expansion.

Script Execution:
-----------------
    Option 1.  Execute script by directly calling bash (or another compatible shell, e.g. 'sh')
        bash myScript.sh
    Option 2.  Make script executable and directly calling the script.
        chmod +x myScript.sh
        ./myScript.sh

Execute Shell Commands with BASH:
---------------------------------
    Some commands (like 'echo') will take almost any argument completely unevaluated.
    If we want to evaluate an argument (e.g. execute a shell command and use the output), we can wrap the command
    in $() (a deprecated alternative is backticks ``).

    echo $(uname -o)    Evaluates uname -o and echos the result to StdOut

Reserved Keywords:
------------------
    declare [-flag] var Declare variables and give them attributes.
                        -a: make var an indexed array; -A: make var an associative array
                        -i: make var an integer; -l: make var all lower-case; -u: make var all upper-case
    exec [command]      If a command is supplied, executes the command in a separate shell process.
                        If no command is supplied, redirections can be used to affect the current shell environment
    let name=val        Allows arithmetic to be performed on variables.
    (( name = val ))    Another way to assign an arithmetic value to a variable
    local               Make a variable assignment local rather than global (as is default)
    $REPLY              The default variable for user input from 'read'
    read [flags] [var]  Prompt user for input stored in $var or $REPLY if no 'var' provided.
                        -s : does not display user input in terminal
                        -p prompt : displays 'prompt' before receiving input
                        -e : uses Readline for input (allowing i.e. filename completion)

Quoting:
--------
    Single quotes '' preserve the literal value of ALL characters contained within.  No escape sequences.
    Double quotes "" preserve the literal value of all contained characters except $, `, \, *, and @
    Escape sequences are valid within strings quoted as $'string'.  The typical backslash '\' is the escape character.

Expansion:
----------
    Brace Expansion:
        Basically distribution and concatenation.  Ignores ${ as this is for parameter expansion.  Example:
            echo a{d,c,b}e      Yields: ade ace abe
        Use example:
            mdkir ./docs/{ex1,ex2,ex3}/img
            # This creates the following directories: ./docs/ex1/img, ./docs/ex2/img, ./docs/ex3/img

    Tilde Expansion:
        Bash interprets an unquoted string between a tilde ~ and a forward slash / as a login name.  If it is null,
        it is replaced with the default user name or HOME shell variable.
        If the tilde prefix is '~+' it is replaced with the value of shell variable PWD.
        If it is '~-' it is replaced with shell variable OLDPWD (if set).

    Shell Parameter Expansion:
        The '$' character intoduces parameter expansion, command substitution, or arithmetic expansion.  The parameter
        or symbol to be expanded may be optionally enclosed in braces {} to protect the variable from surrounding
        characters that may be incorrectly interpreted as part of the name.
        Examples:
            # Get value of variable
            ${parameter}            # Returns stored value of parameter
            # Test for unset/null
            ${parameter:-word}      # If parameter is unset/null, the expansion of word is substituted.
            ${parameter:=word}      # If parameter is unset/null, the expansion of word is assigned to parameter.
            ${parameter:?word}      # If parameter is unset/null, the expansion of word is sent to StdErr
            ${parameter:+word}      # If parameter is unset/null, nothing.  Otherwise expansion of word is substituded.
            # Substring/Subarray Expansion
            ${string:offset:length} # Expands to a subset of 'string' from int 'offset' to int 'length'
                                    # If int 'length' is not given, subset extends to end of 'string'
                                    # If 'length' or 'offset' are <0, counts from end of 'string'
                                    # NOTE!  If using a negative number, put a space between ':' and '-' to avoid ':-'
        Variable Indirection:
            The name of a parameter to be expanded can be constructed by a process before expansion.
            Syntax:
                ${!parameter}
                ${!my*}             # Expands to all variable names that start with 'my'
                ${!my@}             # Same as above but expands enclosed in double quotes.

    Command Substitution:
        Replaces a command with the output of the command.  Has two valid syntaxes with subtle differences.
            $(command)              # Note these are parentheses (), not braces {}
            `command`               # Enclosed in backticks (on the tilde ~ key). Backslash '\' works differently.

    Arithmetic Expansion:
        Allows evaluation of an arithmetic expression and substitutes the result.
        Parameter and variable expansion is allowable within parentheses.
        Syntax:
            $(( expression ))

    Word Splitting:
        Any unquoted characters are checked for word splitting.  This is the parsing of commands by field separators.
        Valid field separators are defined by the $IFS bash variable (defaut = <space><tab><newline>)
        Any resulting null strings are ignored.  Leading/trailing $IFS characters are removed.

    Process Substitution:
        Only supported on systems that support named pipes (see piping).  Related to redirection.
        Not sure exactly what's going on here.
        Syntax:
            >(list)             # Evaluates to a filename.  Writing to filename provides input to 'list'
            <(list)             # The filename passed as an argument is read to obtain output of 'list'

    Pattern Matching:
        After word splitting, Bash scans each word for the characters '*', '?', and '['
        If these characters are present, the word is interpreted as a glob 'pattern' which is evaluated.

    Filename Expansion:
        The filename separator character '/' must be of the correct type for the OS to interpret as a filename.
        Pattern matching can be used for filename expansion, but any periods '.' or slashes '/' must match explicitly.

    Quote Removal:
        After all expansions, all unquoted occurences of \, ', and " are removed.

Redirection:
------------
    Redirecting Output:
        [n]>filename            # Redirect output from file descriptor 'n' to filename.
                                # If 'filename' exists, its content is erased first.
                                # If 'n' is omitted, defaults to StdOut
    Redirecting Input:
        [n]<filename            # Opens 'filename' for reading via file descriptor 'n'.
                                # If 'n' is omitted, defaults to StdIn
    Appending Redirected Output:
        [n]>>filename           # Redirects output from file descriptor 'n' to filename.
                                # If 'filename' exists, output appends to existing content.
                                # If 'n' is omitted, defaults to StdOut
    Redirect StdOut and StdErr Simultaneously:
        &>filename              # Special character to redirect both StdOut and StdErr to filename.
        2>&1                    # Redirect StdErr to the same place as StdOut
    Duplicating File Descriptors:
        [n]<&filename           # Duplicate input file descriptor; e.g. copy filename content to file descriptor 'n'
        [n]>&filename           # Duplicate output file descriptor; e.g. copy file descriptor 'n' output to filename
        >&filename              # Direct StdOut to both the screen (default) and to filename
        [n]<&[m]-               # Move 'm' to 'n'.Copies file descriptor 'm' to file descriptor 'n' then deletes 'm'
        [n]<>filename           # Open file descriptor 'n' for reading and writing.
    Redirection and Piping:
        2>&1 |                  # Redirect stderr to stdout and pipe

    File Descriptor:
        A UNIX concept.  A file descriptor is a non-negative integer used as an abstract handle to access a file or
        other I/O resource such as Standard Input, Standard Output, and Standard Error.
        Value   Name
        -----   ----
        0       Standard Input
        1       Standard Output
        2       Standard Error

        Assign a file descriptor:
            {varname}

Variables:
----------
    Variables are global by default.  Use the 'local' keyword to define a local variable within
    a narrowed scope (e.g. inside a function or loop).

    myVar="A string"            Assign a value to a string variable
    $myVar                      Retrieve the value of a variable (quotes removed during expansion)
    export myVar="A string"     Export the value of this variable to child processes (like making 'global')

Arrays:
-------
    Define an array:
        someArray=('Thing 1' 'Thing 2' 'Thing 3')

    Access array members:
        ${arrayName[n]}         Where 'n' is index integer >0

    Get length of array:
        ${#arrayName[@]}        Isn't that a god-awful syntax?
                                Let's break it down:
                                $   Get the value of something
                                {}  Contains the expression to evaluate for the value
                                #   Get a length
                                [@] Get all elements

Symbolic Operators:
-------------------
    Arithmetic:
        x++, x--            # Post increment and decrement
        ++x, --x            # Pre increment and decrement
        -, +                # Unary plus/minus
        +, -                # Addition, subtraction
        *, /, %             # Multiplication, division, remainder
        **                  # Exponentiation

    Boolean (Logical):
        !                   # Logical negation
        ==, !=              # Test for equality/inequality
        <, >, <=, >=        # Logical comparison
        &&                  # Logical AND
        ||                  # Logical OR

    Bitwise Operators:
        ~                   # Bitwise negation
        &                   # Bitwise AND
        |                   # Bitwise OR
        ^                   # Bitwise XOR
        >>, <<              # Bitshift right, left

    Ternary:
        expr0 ? expr1 : expr2   # Ternary operator.  Just like C.  If expr0==True, expr1; else expr2

    Assignment:
        =, +=, -=, *=, /=, %=   # Arithmetic operator assignment.
        <<=, >>=, &=, |=, ^=    # Bitwise operator assignment.

Conditional Expressions:
------------------------
    Anything inside double brackets [[ ]] is treated as conditional expression.
    Such an expression is evaluated for truth and the expression inside the brackets
    is replaced with the evaluated truthiness.  These operators can be any of the
    Boolean operators above or can be (i.e):
        [[ -n $foo ]]       # True if variable 'foo' is non-empty
        [[ -e $myFile ]]    # True if myFile exists

    Recall that when comparing strings, the RHS is evaluated as a pattern:
        [[ $foo == a* ]]    # True if variable 'foo' starts with 'a'
        [[ $foo == "a*" ]]  # True only if variable 'foo' is exactly 'a*'

Base Representation:
--------------------
    Hexadecimal:
        0xNNNN              # A hexidecimal number where 'NNNN' are digits between 0 and F.  Can also use capital 'X'
    Octal:
        0NNNN               # An octal number where 'NNNN' are digits between 0 and 7.  As if anyone uses this shit.
    Binary:
        [2#]NNNN            # A binary number where 'NNNN' are digits of either 0 or 1.

User-Defined Functions:
-----------------------
    User-defined functions work exactly like built-in shell functions.
    They are defined using one of two possible syntax options.

    Syntax 1:
        name () compound-command [ redirections ]
        # 'name' is the name of the function.  The parentheses are necessary.

    Syntax 2:
        function name [()] compound-command [ redirections ]
        # 'function' is a reserved keyword.  'name' is the name of the function. Parentheses optional.

    Compound Commands:
        A construct combining several commands to execute in order.
        Commands can be separated by newlines, semicolons ; or both.
        A compound command is typically wrapped in braces {}.
    
    Function Example:
        ...

Chaining Multiple Expressions:
------------------------------
    In an interactive shell environment, sometimes you want to give several commands at once and let them execute one
    after the other (instead of writing a script or waiting for each to complete).  To do this, we simply separate the
    commands with the character(s) below, depending on intended result.
    ;       Execute the commands regardless of outcome.
    &&      Execute the second command only if the first one is successful

Flow Control and Conditional Statements:
----------------------------------------
    If-statement:
        If statements begin with keyword 'if' and end with keyword 'fi'
        They can include an else-if ('elif') condition and an else condition.
        In the example below, reserved keywords are 'if', 'then', 'elif', 'else', and 'fi'
        If-statement syntax:
            if test-commands; then
                consequent-commands;
            elif more-test-commands; then
                more-consequents;
            else final-consequents;
            fi

    For-loop:
        We can loop over a sequence of integers in the following way.
        Incremental Sytanx:
            for ((i=0; i<10; i++)); do
                # do stuff with integer i
            done
            # both sets of parentheses seem to be necessary

        We can loop over the elements of an iterable in the following way.
        Iterable Syntax:
            for item in iterable; do
                # do stuff with 'item'
            done

    Tests and Conditional Statements:
    ---------------------------------
      The command 'test' does the same as surrounding the statement in square brackets [ ] (and
      whitespace).  The result of 'test' is boolean - used wherever conditionals are required.
      There are alternate syntaxes for string comparison and arithmetic evaluation which don't
      require escaping grouping characters or operators.

      There are two additional commands which have more specific uses:
        [[ ]]   // String comparison, system tests
        (( ))   // Arithmetic evaluation
      These don't require escaping control characters the way test or [] does, but their results
      can be tricky if used improperly (often can fail silently or yield evaluation result that
      is technically correct, but probably not what the author intended).  A good example of this
      is shown as a 'GOTCHA' below where numeric values are unitentionally compared as strings.

      String Comparison:
      ------------------
        // Operators: -eq, -ne, -gt, -lt, -ge, -le
        //              =,  !=,  \>,  \<, \>=, \<=
        test "abc" = "abc"  && echo True || echo False      // True
        test "abc" = "def"  && echo True || echo False      // False
        [ "abc" = "def" ]   && echo True || echo False      // False
        [[ "abc" = "def" ]] && echo True || echo False      // False
        [[ "abc" == "def" ]] && echo True || echo False      // False
        [ "abc" != "def" ]  && echo True || echo False      // True
        [ "abc" \> "ab" ]   && echo True || echo False      // True   (note the escape of '>')
        [[ "abc" > "ab" ]]  && echo True || echo False      // True   (note the escape of '>')
        [[ "abc" > "de" ]]  && echo True || echo False      // False  (recall string comparison)
        [[ "abc" < "ABC" ]] && echo True || echo False      // False  (recall string comparison)
        [ -z "abc" ]        && echo True || echo False      // False (-z tests for null string)
        [ -z "" ]           && echo True || echo False      // True  (-z tests for null string)

        // GOTCHA! Unescaped '>' in [] evaluates as redirection
        [ "abc" > "def" ]   && echo True || echo False      // True (INCORRECT!)
        [ "abc" \> "def" ]  && echo True || echo False      // False (correct)
        [[ "abc" > "def" ]] && echo True || echo False      // False (correct)

        // Pattern matching with glob strings.  Note, patterns should only be used with
        // '==' and '!=' operators.  Make sure not to put quotes around the pattern string.

      Arithmetic Evaluation:
      ----------------------
        // Operators: -eq, -ne, -gt, -lt, -ge, -le
        //              =,  !=,  \>,  \<, \>=, \<=
        test 3 = 3          && echo True || echo False      // True
        test 3 -eq 3        && echo True || echo False      // True
        [ 5 \> 3 ]          && echo True || echo False      // True   (note escape of '>')
        (( 5 > 13 ))        && echo True || echo False      // False  (no escape of '>')
        [ 5 -gt 3 ]         && echo True || echo False      // True   (-gt alias for \>)
        [ 10 -eq 100 ]      && echo True || echo False      // False  (-eq alias for =)

        // GOTCHA! [[]] compares as strings!!
        [[ 5 > 13 ]]        && echo True || echo False      // True
        (( 5 > 13 ))        && echo True || echo False      // False

        // The (( )) command evaluates the contents as a C-like arithmetic expression
        // and sets the system exit value ($?) to 1 if the expression evaluates to 0
        // or to 0 if it evaluates as non-zero
        // Operators: +, -, ++, --, ==, !=, >, <, ~, &, |, ^
        (( 3 == 4 )); echo $?                               // 1
        (( 3 + 4 ));  echo $?                               // 0
        (( 3 - 3 ));  echo $?                               // 1

        // You can perform math an assign to variables within (( )).  These assignments
        // persist in the shell session
        (( x = 4 )); echo $? $x                             // 0 4
        (( x = 4*4 ^ 1 )); echo $x                          // 17

        // You can chain expressions and use hexadecimal numbers as well
        (( (x = 10) && (y=2) && (z = (x*y) & 0xF) )); echo $x $y $z // 10 2 4

      System Tests:
      -------------
        [ -e "foo" ]        // Test if file/directory "foo" exists
        [ -a "foo" ]        // (alias for '-e')
        [[ (-e "foo") && (-e "bar") ]] // Test if both "foo" and "bar" exist (without escaping)
        [ -d "foo" ]        // Test if "foo" is a directory
        test -f "foo"       // Test if file "foo" is a regular file (false for directories, links)
        test -h "foo"       // Test if file "foo" is a symbolic link
        test -L "foo"       // (alias for '-h')
        [ -p "foo" ]        // Test if "foo" is a named pipe
        [ -r "foo" ]        // Test if "foo" is readable by you (current user)
        [ -w "foo" ]        // Test if "foo" is writable by you (current user)
        test -s "foo"       // Test if "foo" is not empty
        test -S "foo"       // Test if "foo" is a socket
        test -N "foo"       // Test if "foo" has been modified since last being read
        [ "foo" -nt "bar" ] // Test if file "foo" is newer than file "bar"
        [ "foo" -ot "bar" ] // Test if file "foo" is older than file "bar"
        [ "foo" -ef "bar" ] // Test if file "foo" a hard link to file "bar"

      Combining Conditionals:
      -----------------------
        The '-a' and '-o' operators allow you to combine conditional expressions in logical
        AND or logical OR respectively.  The unary '!' operator negates the logical value.
        Recall grouping requires escaping or quoting (weird) parentheses.
        test "a" = "a" -a 3 -gt 2 && echo True || echo False  // True
        test "a" = "a" -a 3 -gt 5 && echo True || echo False  // False
        [ "a" = "a" -o 3 -gt 5 ]  && echo True || echo False  // True
        [ "a" = "b" -o 3 -gt 5 ]  && echo True || echo False  // False
        [ ! \( "a" = "b" -o 3 -gt 5  \) ]  && echo True || echo False  // True
        [ ! '(' "a" = "b" -o 3 -gt 5  ')' ]  && echo True || echo False  // True
        // Note how unwieldy this 'test' or [] syntax gets
        // We can simplify with [[]] syntax (note the || operator instead of '-o')
        [[ ! ("a" = "b" || 3 -gt 5) ]]  && echo True || echo False  // True

Signals and Traps:
------------------
    When a C program terminates, it typically returns an integer indicating something about how/why it terminated.
    Returning zero '0' means all is well.  A full list of values can be obtained via:
        man 7 signal
    Name        Value       Comment
    ----        -----       -------
    SIGNHUP     1           Hangup detected on controlling terminal or death of controlling process
    SIGINT      2           Interrupt from keyboard
    SIGQUIT     3           Quit from keyboard
    SIGFPE      8           Floating point exception
    SIGKILL     9           Kill signal
    SIGSEGV     11          Segmentation fault: invalid memory reference
    SIGPIPE     13          Broken pipe: write to pipe with no reader

    A trap is a built-in command which executes on receipt of a particular signal.
    Traps can be overwritten and/or user-defined.


