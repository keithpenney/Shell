Windows Shell Scripting via CMD / Command Line Notes

General Notes:
    Whitespace is important!  Do not add/remove any spaces for clarity; this will change the content.
    Sometimes case sensitive.
        function names and environment variables are case INsensitive.
        function parameters can be case Sensitive.
    If "Quick Edit Mode" is enabled (right click on command prompt title bar, select Properties), 
    paste copied text with a right-click

Batchfile:
    Batchfiles (.bat) and command files (.cmd) do nearly exactly the same thing.  The only difference
    is that .cmd files set the ERRORLEVEL regardless of error status while .bat files only set the
    ERRORLEVEL on an error.
    You can drag and drop batch files (.bat) right into the command prommpt window
    To call a batchfile from another batchfile, there are multiple options.  Say you want to call
    'foo.bat' from within 'bar.bat'.  In 'bar.bat',
      foo.bat           :: Execution is passed to 'foo.bat' and ever returns to 'bar.bat'
      call foo.bat      :: Execution of 'bar.bat' continues after 'foo.bat' completes
      cmd foo.bat       :: Executes 'foo.bat' in a separate instance of cmd.exe (new cmd window)
      start foo.bat     :: start.exe executes 'foo.bat' concurrently ('bar.bat' does not wait)

Symbols:
    @   Any line that begins with @ doesn't echo the command itself.
    %   Enclose an environment variable within %% to retrieve its value.
        %n (where n = 1, 2, 3... 9) represents the nth arg passed to the command
        %*   returns a string of all arguments from 1 onward
    >   Redirect.  Send the output of one function/process to a file.  Overwrites by default.
        e.g. Echo Some text to file > C:\filename.txt
    >>  Redirect append.  Send the output of one function/process to a file.  Append by default.
    2>  Redirect error output.  Same as > but for Standard Error, not Standard Output
        e.g (cd ThisDontExist 2> errortext.txt)
    ^   Escape character.  Treats following character as just a character; no evaluation/interpretation
    *   Wildcard.  In searches/file operators, you can often use * as a character/string wildcard.
    Nul A trash can where you can direct output that you want to suppress, 

Comments:
    rem anything following rem (remark) is a comment and is ignored.  Works in batch files and cmd.
    :: a double colon also functions as a comment
    rem and :: differ by a linefeed character

Help
    FUNCTION_NAME /?
        Read documentation for function FUNCTION_NAME

Clipboard
    The 'clip' command redirects output to the Windows clipboard for pasting elsewhere.
    dir | clip          Places output of 'dir' function onto the Windows clipboard
    clip < file.txt     Places a copy of the contents of 'file.txt' onto the Windows clipboard.

Core functions:
    cd      change directory
    copy    copy file1 file2 (copies file1 to file2).  See more below.
            Weird.  When copy encounters an error, it outputs to Standard Out, not Standard Error
    cls     Clear the screen
    del     delete a file
    dir     see contents of directory
            dir /s pattern searches recursively for file names matching "pattern" (e.g. *.py)
    echo    (see below)
    find    Find lines matching a string pattern (like Unix grep)
    findstr More powerful version of 'find' with regex support.
    help    Get help (like Unix 'man')
    move    Moves files/folders to a new location
    ping    Test network connection
    pushd   Stores the current path on the stack and changes directories to a new path
    popd    Changes the current working path to the last path pushed to the stack
    rmdir   Delete a directory

Copy:
    Command 'copy' is often used with the device name 'con' (for 'console').  This allows a few
    different options which sort of overlap with 'echo'.
    copy con myfile.txt
        Copy texte entered from the 'console' ('con') to the file 'myfile.txt'
    copy myfile.txt con
        Copy the contents of 'myfile.txt' to the console ('con').

Pushd/Popd:
    Commands pushd and popd are not actually as useful as they sound.
    It seems the directory stack is overwritten by cd to be the default for the command window.
    :: Terminal Example ::
    C:\folder1>pushd \MyStuff\SomeFolder
    C:\folder1\MyStuff\SomeFolder>popd
    C:\folder1>
    :: End Example ::

ErrorLevel
    Most commands return an errorlevel (0 means successful, 1 or > means error of some sort)
    Check for success of previous command with
        If errorlevel 1 echo Something bad happened.
    Show current errorlevel with
        Echo %errorlevel%

Echo
    Determine whether echo is on or off. (echo)
    Turn command echo on or off. (echo on)
    Print text to screen. (echo some text)
    Print a blank line (echo.)
    Print text to a file (echo the quick brown fox > C:\sometextfile.txt)

Environment Variables (envars)

    System-related environment variables are stored in:
        HKEY_LOCAL_MACHINE\SYSTEM\...\Environment
    User-related envars are stored in:
        HKEY_CURRENT_USER\Environment

    SetLocal/EndLocal
        Place these as wrappers around the scope of the envar.
        Otherwise, they will default to global and potentially
        conflict with system envars.

    %VAR_NAME%      use the variable's value instead of the variable object itself
        e.g. echo %VAR_NAME%

    %MyVar:c=d%     Replace all instances of character 'c' with character 'd' in
                    the expansion of 'MyVar'

Set
    set /?  for help
    set
        lists all environment variables

    set VAR_NAME
        prints the value of VAR_NAME to the screen


    set V           displays all variables starting with character "V"

    set VAR_NAME=SOME_STUFF_HERE
        set VAR_NAME to SOME_STUFF_HERE (can be string, integer, float, etc)
        only applies to current command sesion

    set VAR_NAME=
        delete (unset) the variable VAR_NAME
        sometimes called "clobbering"
        
    set /a
        Arithmetic flag.  Evaluates the following expression.  Only works with ints.
        set /a "(22<<2)%3+9"        Evaluates to 10; prints to Standard Out
        set /a VarName="~16"        Evaluates to -17 (two's complement negation); stores value in VarName
        set /a VarName*=2           Multiplies the value of VarName by 2, then assigns VarName to the new value.

    set "var=this value has spaces"
        To set a variable value with spaces, it's best to place the quotes around the entire
        assignment.

    set var="this includes the quote makrs"
        If we instead place the quotation marks around the variable value, it is stored with the
        quotation marks included, which would later need to be escaped.

    set var=this will create a bunch of variables
        This will create one variable named 'var' assigned to value 'this', and then several empty
        variables named 'will', 'create', 'a', 'bunch', 'of', and 'variables'.

    set "VAR_NAME=cd ../"
        set VAR_NAME to a command. Then run the command with %VAR_NAME%

Setx
    -- Stores the variable in the registry:
    --    User Variables: HKEY_CURRENT_USER\Environment
    --    Machine Variables: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment
    -- Note! Setx has a different syntax than Set! This trips me up every time...

    setx VAR_NAME SOME_STUFF_HERE
        permanently set VAR_NAME to SOME_STUFF_HERE

    setx VAR_NAME %VAR_NAME%SOME_STUFF_HERE
        permanently append SOME_STUFF_HERE to VAR_NAME
        
    setx VAR_NAME ""
        hide the variable VAR_NAME (will not display with 'Set' but will remain in the registry)

If
    If /?   for help
    Simplest syntax:
        If condition codeToExecute
    If-else syntax:
        If condition (codeToExecute) else (codeIfNotCondition)
    Or multiline:
        If condition (
            codeToExecute
        ) Else (
            codeIfNotCondition
        )
    Boolean operators:
        EQU     equal
        NEQ     not equal
        LSS     less than
        LEQ     less than or equal
        GTR     greater than
        GEQ     greater than or equal

    Application - Determine if filename exists
        If exist filename echo true
        If not exist filename echo doesn't exist bro^!
        If exist *.txt echo There's some text here.

For
    For /?  for help
    FOR %variable IN (set) DO command [command-parameters]

    /R      Recursive: walks the directory, executing the FOR loop for each folder
    /L      The set is a sequence of numbers of (start, step, end) format
    /F      The set is a "file set", which is one or more file names to be opened, read, and processed.

Labels/GoTo
    Labels are preceded by a colon :
        :mylabel
    Can use spaces, but no commas, semicolons, periods, etc.
    Scripting engine only reads first 8 characters, so :thislabel1 and :thislabel2 are treated as the same and can cause errors
    GoTo syntax
        GoTo :mylabel

Command Arguments (in batch files):
    %*      A string including all arguments (space-separated) (not %0)
    %0      The command/filename called
    %1      The first argument
    %n      (where n is int between 1 and 9) the nth argument

    shift       Shifts the values of arguments "downwards" (e.g. puts val of %1 into %0, val of %2 into %1, etc.)
    shift /n    Start shifting at the nth argument (n can be 0 to 8)
                Note!  Shift does not affect the value of %*
    %~1     Expands %1 removing any surrounding quotes ("")
    %~f1    Expands %1 to a fully-qualified path name
    %~d1    Expands %1 to a drive letter only
    %~p1    Expands %1 to a path only
    %~n1    Expands %1 to a filename only
    %~x1    Expands %1 to a file extension only
    %~s1    Expanded path contains only short names
    %~a1    Expands %1 to file attributes
    %~t1    Expands %1 to date/time of file
    %~z1    Expands %1 to size of file
    %~$PATH:1   Searches the PATH envar and expands %1 to the fully-qualified name of the first match found (else "")
            These can be combined, as in:
    %~nx1   Expands %1 to a filename and extension

Extra Functions:
    Net         Enables a lot of network-related activity.
    Attrib      Show/modify file attributes ('S'ystem, 'A'rchived, 'H'idden, 'R'ead-only)
    robocopy    Robust file copy.  Lots of neat configuration options.
    xcopy       Another copy mechanism.

=========================================== PowerShell ================================================================

General differences:
    Environment variables don't work the same.  "Set" is different.

Comments:
    # Comments can also begin with the pound character '#' like Python

Handling variables (different than environment variables):
    $var = "Anything you want"
    $mynum = 4
    $var -replace "want", "need"

Example - Serial Port Communication
    $port = new-Object System.IO.Ports.SerialPort COM1,9600,None,8,one
    :: COMportNumber,BaudRate,Parity,DataBits,StopBits
    $port.Open()
    $port.WriteLine("hello world")
    $port.ReadExisting()
    $port.Close()
